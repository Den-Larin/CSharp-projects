using System;

namespace Успадкування
{
    class Program
    {
        static void Main(string[] args)
        {
            // Завдання 1:
            Circle circle = new Circle {Radius = 7};
            Rectangle rectangle = new Rectangle {Width = 2, Height = 5};
            Console.WriteLine($"Коло - Площа: {circle.CalculateArea()}, Периметр: {circle.CalculatePerimeter()}");
            Console.WriteLine($"Прямокутник - Площа: {rectangle.CalculateArea()}, Периметр: {rectangle.CalculatePerimeter()}");
            // Завдання 2:
            Apple apple = new Apple { Name = "Яблуко", Variety = "Джероміні", Color = "Червоний" };
            Pear pear = new Pear { Name = "Груша", Variety = "Панянка", Color = "Жовтий" };
            Console.WriteLine($"Яблуко - Назва: {apple.Name}, Сорт: {apple.Variety}, Колір: {apple.Color}");
            Console.WriteLine($"Груша - Назва: {pear.Name}, Сорт: {pear.Variety}, Колір: {pear.Color}");
            // Завдання 3:
            Cat cat = new Cat("Білий", 6.4f, 14.2f);
            Dog dog = new Dog("Коричневий", 12.3f, 18.7f);
            Console.WriteLine(cat);
            Console.WriteLine($"Кіт: {cat.MakeSound()}");
            Console.WriteLine(dog);
            Console.WriteLine($"Собака: {dog.MakeSound()}");
        }
    }
    public class Figure
    {
        public virtual double CalculateArea()
        {
            return 0;
        }
        public virtual double CalculatePerimeter()
        {
            return 0;
        }
    }
    public class Circle : Figure
    {
        public double Radius { get; set; }
        public override double CalculateArea()
        {
            return Math.PI * Math.Pow(Radius, 2);
        }
        public override double CalculatePerimeter()
        {
            return 2 * Math.PI * Radius;
        }
    }
    public class Rectangle : Figure
    {
        public double Width { get; set; }
        public double Height { get; set; }
        public override double CalculateArea()
        {
            return Width * Height;
        }
        public override double CalculatePerimeter()
        {
            return 2 * (Width + Height);
        }
    }
    public class Fruit
    {
        public string Name { get; set; }
    }
    public class Apple : Fruit
    {
        public string Variety { get; set; }
        public string Color { get; set; }
    }
    public class Pear : Fruit
    {
        public string Variety { get; set; }
        public string Color { get; set; }
    }
    public abstract class Animal
    {
        public float Weight { get; set; }
        public string Color { get; set; }
        public Animal(string color, float weight)
        {
            Color = color;
            Weight = weight;
        }
        public abstract string MakeSound();
    }
    public abstract class AnimalWithTail : Animal
    {
        public float TailLength { get; set; }
        public AnimalWithTail(string color, float weight, float tailLength) : base(color, weight)
        {
            TailLength = tailLength;
        }
    }
    public class Cat : AnimalWithTail
    {
        public Cat(string color, float weight, float tailLength) : base(color, weight, tailLength) { }
        private string Purr()
        {
            return "purrrrrrrr";
        }
        private string Meow()
        {
            return "Meow";
        }
        public override string MakeSound()
        {
            return Purr() + Meow();
        }
        public override string ToString()
        {
            return $"This is a Cat, Color = {Color}, Weight = {Weight}, TailLength = {TailLength}";
        }
    }
    public class Dog : AnimalWithTail
    {
        public Dog(string color, float weight, float tailLength) : base(color, weight, tailLength) { }
        public override string MakeSound()
        {
            return "Woof";
        }
        public override string ToString()
        {
            return $"This is a Dog, Color = {Color}, Weight = {Weight}, TailLength = {TailLength}";
        }
    }
 }
